//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-793 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.12.07 at 08:59:42 PM EET 
//

package com.iba.tachonet.bean;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for CCS_MS2TCN_SearchStatusCodeEnumType.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * <p>
 * 
 * <pre>
 * &lt;simpleType name="CCS_MS2TCN_SearchStatusCodeEnumType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *     &lt;enumeration value="Found"/>
 *     &lt;enumeration value="NotFound"/>
 *     &lt;enumeration value="Timeout"/>
 *     &lt;enumeration value="ServerError"/>
 *     &lt;enumeration value="WorkshopCardStatusNotAvailable"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "CCS_MS2TCN_SearchStatusCodeEnumType")
@XmlEnum
public enum CCSMS2TCNSearchStatusCodeEnumType {

    @XmlEnumValue("Found")
    FOUND("Found"), @XmlEnumValue("NotFound")
    NOT_FOUND("NotFound"), @XmlEnumValue("Timeout")
    TIMEOUT("Timeout"), @XmlEnumValue("ServerError")
    SERVER_ERROR("ServerError"), @XmlEnumValue("WorkshopCardStatusNotAvailable")
    WORKSHOP_CARD_STATUS_NOT_AVAILABLE("WorkshopCardStatusNotAvailable");
    private final String value;

    CCSMS2TCNSearchStatusCodeEnumType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static CCSMS2TCNSearchStatusCodeEnumType fromValue(String v) {
        for (CCSMS2TCNSearchStatusCodeEnumType c : CCSMS2TCNSearchStatusCodeEnumType
                .values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
